import { type IGestureEvent } from '../modules/gesture';
import { SwiperModel, type IOpenStyle, type IBBox, type IDirection } from '../core';
import Image from './image';
import { type ICSSStyle, type IElement } from '../modules/lightdom';
import '../style/gallery.less';
declare class Gallery extends SwiperModel<Image> {
    _container: HTMLElement | null;
    _backdrop: HTMLElement | null;
    _wrapper: HTMLElement | null;
    _indicator: HTMLElement | null;
    _openStyle: IEOpenStyle | null;
    _originBox: IBBox | null;
    _viewBox: IBBox | null;
    _overflow: string;
    _destoryOnClose: boolean;
    _itemGap: number;
    _unbind: (() => void) | null;
    constructor({ container, style, className, backdropStyle, backdropClassName, wrapperStyle, wrapperClassName, indicatorStyle, indicatorClassName, current, imageUrls, direction, itemGap, isLazy, hasIndicator, destroyOnClose, enableSwipeClose, loading, error, originBox, onPopupMenu, onChange, onAfterChange, onClose, onAfterClose, onAfterOpenChange, }: IGalleryOptions);
    updateViewBox(): void;
    updateImageGap(): void;
    updateImageSize(): void;
    setDestoryOnClose(destoryOnClose?: boolean): void;
    setOriginBox(originBox?: IBBox): void;
    setItemGap(itemGap?: number): void;
    setDirection(direction?: IDirection): void;
    currentItem(sup?: boolean): Image | null;
    enableSwipeClose(enableSwipeClose?: boolean): void;
    destory(): void;
    private animateOpen;
    private openStyle;
    private lockOverflow;
    open(): void;
    close(): void;
}
type IEOpenStyle = IOpenStyle & {
    end?: () => void;
    open?: boolean;
};
export type IGalleryOptions = {
    container?: IElement;
    style?: ICSSStyle;
    className?: string;
    backdropStyle?: ICSSStyle;
    backdropClassName?: string;
    wrapperStyle?: ICSSStyle;
    wrapperClassName?: string;
    indicatorStyle?: ICSSStyle;
    indicatorClassName?: string;
    current?: number;
    imageUrls?: string[];
    itemGap?: number;
    direction?: IDirection;
    isLazy?: boolean;
    hasIndicator?: boolean;
    destroyOnClose?: boolean;
    enableSwipeClose?: boolean;
    originBox?: IBBox;
    loading?: IElement | false;
    error?: IElement | false;
    onPopupMenu?: (e: IGestureEvent) => void;
    onChange?: (v: number) => void;
    onAfterChange?: (v: number) => void;
    onClose?: (e: IGestureEvent) => void;
    onAfterClose?: () => void;
    onAfterOpenChange?: (o: boolean) => void;
};
export default Gallery;
